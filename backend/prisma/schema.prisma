// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(USER)
  phone         String?
  address       String?
  city          String?
  state         String?
  zipCode       String?
  country       String?   @default("Brasil")
  birthDate     DateTime?
  gender        String?
  preferences   Json?     // User preferences as JSON
  isActive      Boolean   @default(true)
  lastLoginAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  orders   Order[]
  reviews  Review[]
  cartItems CartItem[]
  wishlist Wishlist[]
  addresses Address[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  image       String?
  slug        String    @unique
  brand       Brand?
  icon        String?
  seoTitle    String?
  seoDescription String?
  sortOrder   Int       @default(0)
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  products Product[]
}

model Product {
  id            String   @id @default(cuid())
  name          String
  description   String
  slug          String   @unique
  price         Float
  discountPrice Float?
  stock         Int
  status        ProductStatus @default(ACTIVE)
  featured      Boolean  @default(false)
  brand         Brand
  images        String   // JSON string of image URLs
  categoryId    String
  rating        Float?   @default(0)
  totalReviews  Int      @default(0)
  specifications String?   // Store product specs as JSON string
  seoTitle      String?
  seoDescription String?
  weight        Float?
  dimensions    String?  // JSON string for dimensions
  warranty      Int?     @default(12) // months
  tags          String?  // JSON array of tags
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  category    Category     @relation(fields: [categoryId], references: [id])
  orderItems  OrderItem[]
  reviews     Review[]
  cartItems   CartItem[]
  wishlist    Wishlist[]
}

model CartItem {
  id        String @id @default(cuid())
  userId    String
  productId String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

model Order {
  id              String      @id @default(cuid())
  userId          String
  status          OrderStatus @default(PENDING)
  paymentStatus   PaymentStatus @default(PENDING)
  paymentMethod   String
  subtotal        Float
  shipping        Float
  discount        Float       @default(0)
  total           Float
  shippingAddress Json        // Store shipping address as JSON
  trackingCode    String?
  notes           String?
  couponId        String?
  estimatedDelivery DateTime?
  deliveredAt     DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  user       User        @relation(fields: [userId], references: [id])
  coupon     Coupon?     @relation(fields: [couponId], references: [id])
  orderItems OrderItem[]
}

model OrderItem {
  id        String @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  createdAt DateTime @default(now())

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  productId String
  rating    Int
  comment   String?
  images    String?  // JSON array of review images
  verified  Boolean  @default(false) // Verified purchase
  helpful   Int      @default(0) // Helpful votes
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
}

model Wishlist {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

model Newsletter {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Coupon {
  id          String      @id @default(cuid())
  code        String      @unique
  description String?
  type        CouponType
  value       Float       // Percentage or fixed amount
  minAmount   Float?      // Minimum order amount
  maxAmount   Float?      // Maximum discount amount
  usageLimit  Int?        // Total usage limit
  usageCount  Int         @default(0)
  userLimit   Int?        // Per user limit
  startDate   DateTime
  endDate     DateTime
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  orders Order[]
}

model Address {
  id           String  @id @default(cuid())
  userId       String
  name         String  // Address name (e.g., "Home", "Work")
  recipientName String
  street       String
  number       String
  complement   String?
  neighborhood String
  city         String
  state        String
  zipCode      String
  country      String  @default("Brasil")
  isDefault    Boolean @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Analytics {
  id        String   @id @default(cuid())
  date      DateTime @default(now())
  pageViews Int      @default(0)
  visitors  Int      @default(0)
  sales     Float    @default(0)
  orders    Int      @default(0)
  data      Json?    // Additional analytics data
  createdAt DateTime @default(now())

  @@unique([date])
}

enum Role {
  USER
  ADMIN
}

enum Brand {
  USSBRASIL
  PARTNERS
  MARKETPLACE
  JBL
  XIAOMI
  SAMSUNG
  APPLE
  DJI
  SONY
  GOOGLE
  MICROSOFT
  OTHER
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  OUT_OF_STOCK
}

enum CouponType {
  PERCENTAGE
  FIXED_AMOUNT
  FREE_SHIPPING
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}
